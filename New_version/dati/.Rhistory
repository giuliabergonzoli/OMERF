#i fitted values corretti sono già quelli della funzione clmm, poichè
#ho incorporato i fitted values della random forest nel modello
mu_avg=cm$clmm.model$fitted.values #for an avg random effect
f.x_ij=cm$forest.model$predicted
y_train=as.numeric(cm$clmm.model$y)
mu=rep(0,length(mu_avg))
eta=rep(0,length(mu_avg))
for (i in 1:length(mu_avg)) {
c=group[i]
j=y_train[i]-min(y_train)+1
if(j==1) {
eta[i]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
mu[i]=plogis(eta[i])
} else if(j==max(y_train)-min(y_train)+1) {
eta[i]=qlogis(0.999)
mu[i]=1 - plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # 1 - P(yi<=j-1)
} else {
eta[i]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
mu[i]=plogis(cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]) -
plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # P(yi<=j) - P(yi<=j-1)
}
}
#errore se il tipo di risposta non è tra questi
allowed=c('response', 'mu', 'eta')
msg=paste('Possible choices are ', allowed[1],', ' ,allowed[2],' and ',
allowed[3], sep='')
if(sum(type==allowed)==0) stop('Type of prediction not available:',msg)
if(type=='mu') ans=mu # P(yi=j)
if(type=='response') ans=as.factor(y_train)
if(type=='eta') ans=eta
ans
}
predict.cmerf=function(cm, y_train, newdata, group, type='response',
predict.all=FALSE) {
#chiamo semplicemente i metodi predict di clmm e randomForest
forest.data=newdata[cm$forest.var]
f.x_ij=predict(cm$forest.model,forest.data,predict.all=predict.all)
preds <- as.data.frame(matrix(0, dim(newdata)[1], length(levels(y_train))))
eta <- as.data.frame(matrix(0, dim(newdata)[1], length(levels(y_train))))
lev=levels(y_train)
names(preds) = lev
names(eta) = lev
for (j in 1:length(lev)) {
for (i in 1:dim(newdata)[1]) {
c=group[i]
if(j==1) {
eta[i,j]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
preds[i,j]=plogis(eta[i,j])
} else if(j==length(lev)) {
eta[i,j]=qlogis(0.999)
preds[i,j]=1 - plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # 1 - P(yi<=j-1)
} else {
eta[i,j]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
preds[i,j]=plogis(cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]) -
plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # P(yi<=j) - P(yi<=j-1)
}
}
}
max_mu <- apply(preds, 1, max)
pred_val <- names(preds)[apply(preds, 1, which.max)]
#errore se il tipo di risposta non è tra questi
allowed=c('response', 'mu', 'eta')
msg=paste('Possible choices are ', allowed[1],', ' ,allowed[2],' and ',
allowed[3], sep='')
if(sum(type==allowed)==0) stop('Type of prediction not available:',msg)
if(type=='eta') ans=eta # eta relativo alla classe predetta
if(type=='mu') ans=preds # P(yi=j) j=1,...,J
if(type=='response') ans=pred_val
ans
}
library(ordinal)
data(wine)
set.seed(1999)
trainind <- sort(sample(1:nrow(wine), size=floor(nrow(wine)*0.85)))
testind <- setdiff(1:nrow(wine), trainind)
data_test <- wine[testind,]
wine <- wine[trainind,]
table(wine$rating)
table(data_test$rating)
#input
y=wine$rating
cov=wine[,c('temp','contact')]
group=wine$judge
xnam=NULL
bizero=NULL
itmax=30
toll=0.02
###### CMERF
prova = cmerf(y, cov, group)
summary.cmerf(prova)
ranef.cmerf(prova, group)
View(prova)
fitted.cmerf(prova, group, type='response')
fitted.cmerf(prova, group, type='mu')
fitted.cmerf(prova, group, type='eta')
predict.cmerf(prova, y, data_test, data_test$judge, type='response')
preds=predict.cmerf(prova, y, data_test, data_test$judge, type='mu')
#rowSums(preds)
predict.cmerf(prova, y, data_test, data_test$judge, type='eta')
data_test$rating
cmerf= function (y, cov, group, xnam=NULL, bizero=NULL,
itmax=30, toll=0.02) {
#cumulative (ordinal) mixed-effects random forest (CMERF)
#argomenti:
#-y=vettore con le risposte
#-cov=data frame con le covariate di ogni unità statistica
#-group=vettore factor che, per ogni unità statistica, dice il gruppo a cui appartiene
#-xnam=vettore coi nomi delle covariate da usare nella random forest
#-bizero=vettore che contiene i coefficienti dei random effects
#assumo che group e bizero siano coerenti, cioè b[,i] corrisponda a levels(group)[i]
######################################
####	STEP 1: Inizializzazione  ######
######################################
N <- length(y) #numero di osservazioni
n=length(levels(group)) #numero di gruppi
Zi.int= rep(1,N) #random intercept
#Inizializzo (se è NULL) bi a 0
if( is.null(bizero) ){
bi <- NULL
for(i in 1:n) bi=cbind(bi,0)
}
if( !is.null(bizero) ) bi=bizero
lev=levels(group) #nomi dei gruppi
bi=data.frame(bi)
names(bi)=lev
all.bi=list()  #i b_i di ogni iterazione
all.bi[[1]]=bi
#se xnam è NULL assumo che tutte le variabili di cov siano da usare
if(is.null(xnam)) xnam=names(cov)
#group deve essere un factor, altrimenti da errore
if(!is.factor(group)) stop('Argomento "group" deve essere un factor')
#clmm.formula=as.formula("y ~ 1")
forest.formula=as.formula(paste("target ~ ", paste(xnam, collapse= "+")))
##################################################
####	STEP 2: CLM per inizializzare mu_ij  #######
##################################################
library(ordinal)
clm.formula=as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
clm.data= cbind(y,cov[xnam])
clm.0=clm(clm.formula, data=clm.data, link='logit')
mu.ij.0=clm.0$fitted.values #P(yi=j)
prob.est=predict(clm.0,clm.data,type = "cum.prob")[1]$cprob1
prob.est[which(prob.est==1)]=0.999
eta.est=qlogis(prob.est) #predittore lineare del clm
####################################################
####	STEP 3-4: Stima iterativa del modello  #######
####################################################
library(randomForest)
it=1
converged=FALSE
while(!converged && it<itmax) {
#random forest
target=rep(0,N) #target=eta-Z%*%b
for (i in 1:N) {
b.temp=as.numeric(bi[group[i]])
z.temp=as.numeric(Zi.int[i])
target[i]= eta.est[i] - z.temp*b.temp
}
forest.data=cbind(target, cov[xnam])
forest=randomForest(forest.formula, forest.data)
f.x_ij=forest$predicted
clmm.data = data.frame(y,group,f.x_ij)
#voglio mantenere l'ordine degli elementi dei b_i
clmm.fit= clmm2(y ~ 1, scale= ~ offset(f.x_ij), random=group, link='logistic', data=clmm.data, Hess=TRUE, control=clmm2.control(maxLineIter = 200, maxIter=500, grtol=1e-4), nAGQ = 10)
clmm.bi=clmm.fit$ranef
#convergenza dei b_i
bi.old=bi
bi=data.frame(t(clmm.bi))
names(bi)=lev
diff.t=abs(bi.old-bi)
n.diff=max(diff.t) #uso la norma infinito(max)
ind=which(diff.t==n.diff, arr.ind=T)
n.old=abs(bi.old[ind])
converged= n.diff/n.old <toll
it=it+1
all.bi[[it]]=bi
}
###############################################
####	STEP 5: Preparazione output  ############
###############################################
#se non ho convergenza do un messaggio di errore
if(!converged) {
warning('Numero massimo di iterazioni superato, non si è arrivati a convergenza')
}
result=list(clmm.fit,forest,bi,it,converged,all.bi,xnam)
names(result)=c('clmm.model', 'forest.model', 'rand.coef', 'n.iteration',
'converged','all.rand.coef','forest.var')
class(result)='cmerf'
result
}
ranef.cmerf=function(cm, group) {
ci <- cm$clmm.model$ranef + qnorm(0.975) * sqrt(cm$clmm.model$condVar) %o% c(-1, 1)
ord.re <- order(cm$clmm.model$ranef)
lev <- levels(group)
ci <- ci[order(cm$clmm.model$ranef),]
plot(1:length(lev), cm$clmm.model$ranef[ord.re], axes=FALSE, ylim=range(ci),
xlab="group", ylab="group effect")
axis(1, at=1:length(lev), labels = lev[ord.re])
axis(2)
for(i in 1:length(lev)) segments(i, ci[i,1], i, ci[i, 2])
abline(h = 0, lty=2)
}
summary.cmerf=function(cm) {
print('Mixed effects model') #summary del mixed effects model
print(summary(cm$clmm.model))
str=ifelse(cm$converged, 'Converged', 'Did not converge')
print(paste(str , 'after', cm$n.iteration, 'iterations')) #dice se c'è convergenza
}
fitted.cmerf=function(cm, group, type='response') {
#i fitted values corretti sono già quelli della funzione clmm, poichè
#ho incorporato i fitted values della random forest nel modello
mu_avg=cm$clmm.model$fitted.values #for an avg random effect
f.x_ij=cm$forest.model$predicted
y_train=as.numeric(cm$clmm.model$y)
mu=rep(0,length(mu_avg))
eta=rep(0,length(mu_avg))
for (i in 1:length(mu_avg)) {
c=group[i]
j=y_train[i]-min(y_train)+1
if(j==1) {
eta[i]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
mu[i]=plogis(eta[i])
} else if(j==max(y_train)-min(y_train)+1) {
eta[i]=qlogis(0.999)
mu[i]=1 - plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # 1 - P(yi<=j-1)
} else {
eta[i]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
mu[i]=plogis(cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]) -
plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # P(yi<=j) - P(yi<=j-1)
}
}
#errore se il tipo di risposta non è tra questi
allowed=c('response', 'mu', 'eta')
msg=paste('Possible choices are ', allowed[1],', ' ,allowed[2],' and ',
allowed[3], sep='')
if(sum(type==allowed)==0) stop('Type of prediction not available:',msg)
if(type=='mu') ans=mu # P(yi=j)
if(type=='response') ans=as.factor(y_train)
if(type=='eta') ans=eta
ans
}
predict.cmerf=function(cm, y_train, newdata, group, type='response',
predict.all=FALSE) {
#chiamo semplicemente i metodi predict di clmm e randomForest
forest.data=newdata[cm$forest.var]
f.x_ij=predict(cm$forest.model,forest.data,predict.all=predict.all)
preds <- as.data.frame(matrix(0, dim(newdata)[1], length(levels(y_train))))
eta <- as.data.frame(matrix(0, dim(newdata)[1], length(levels(y_train))))
lev=levels(y_train)
names(preds) = lev
names(eta) = lev
for (j in 1:length(lev)) {
for (i in 1:dim(newdata)[1]) {
c=group[i]
if(j==1) {
eta[i,j]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
preds[i,j]=plogis(eta[i,j])
} else if(j==length(lev)) {
eta[i,j]=qlogis(0.999)
preds[i,j]=1 - plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # 1 - P(yi<=j-1)
} else {
eta[i,j]=cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]
preds[i,j]=plogis(cm$clmm.model$Theta[j] - f.x_ij[i] - cm$clmm.model$ranef[c]) -
plogis(cm$clmm.model$Theta[j-1] - f.x_ij[i] - cm$clmm.model$ranef[c]) # P(yi<=j) - P(yi<=j-1)
}
}
}
max_mu <- apply(preds, 1, max)
pred_val <- names(preds)[apply(preds, 1, which.max)]
#errore se il tipo di risposta non è tra questi
allowed=c('response', 'mu', 'eta')
msg=paste('Possible choices are ', allowed[1],', ' ,allowed[2],' and ',
allowed[3], sep='')
if(sum(type==allowed)==0) stop('Type of prediction not available:',msg)
if(type=='eta') ans=eta # eta relativo alla classe predetta
if(type=='mu') ans=preds # P(yi=j) j=1,...,J
if(type=='response') ans=pred_val
ans
}
library(ordinal)
data(wine)
set.seed(1999)
trainind <- sort(sample(1:nrow(wine), size=floor(nrow(wine)*0.85)))
testind <- setdiff(1:nrow(wine), trainind)
data_test <- wine[testind,]
wine <- wine[trainind,]
table(wine$rating)
table(data_test$rating)
#input
y=wine$rating
cov=wine[,c('temp','contact')]
group=wine$judge
xnam=NULL
bizero=NULL
itmax=30
toll=0.02
###### CMERF
prova = cmerf(y, cov, group)
summary.cmerf(prova)
library(ordinal)
data(wine)
set.seed(1999)
trainind <- sort(sample(1:nrow(wine), size=floor(nrow(wine)*0.85)))
testind <- setdiff(1:nrow(wine), trainind)
data_test <- wine[testind,]
wine <- wine[trainind,]
table(wine$rating)
table(data_test$rating)
y=wine$rating
cov=wine[,c('temp','contact')]
group=wine$judge
clm.data= cbind(y,cov)
clm.0=clm(y ~ temp + contact, data=clm.data, link='logit')
mu.ij.0=clm.0$fitted.values #P(yi=j)
prob=predict(clm.0,clm.data,type = "cum.prob")[1]
prob.est=prob$cprob1
which(prob.est==1)
which(clm.data$y==5)
0.4372/(0.4372+3.29)
2.128/(2.128+3.29)
2.112/(2.112+3.29)
setwd("D:/tesi2/dati")
studenti <- read.csv("studenti_2_marzo.csv", row.names=1)
voti_semestre <- read.csv("2021-02-17_10-35-13_polimi_valutazione.csv", sep = ';', dec = '.')
voti_singoli <- read.csv("2021-02-17_10-35-13_polimi_registro_valutazioni_flat.csv", sep = ';', dec = '.')
View(voti_singoli)
voti_singoli$Valutazione = (voti_singoli$Valutazione)/10
View(voti_singoli)
names(voti_singoli)[1] = "Oid"
voti_media_sett <- read.csv("2021-02-17_10-35-13_polimi_registro_valutazioni_settimana.csv", sep = ';', dec = '.')
names(voti_media_sett)[1] = "Oid"
#keep only note, assenze, ritardi complessivi (non conto settimanale) e primo quadrimestre (21^ sett)
studenti <- studenti[,-c(seq(268,349),seq(394,475),seq(22,41),seq(43,61),seq(63,82),seq(84,102),seq(104,123),seq(125,143),seq(145,164),seq(166,184),seq(186,205),seq(207,225))]
View(studenti)
voti_semestre$DataScrutinio <- as.Date(voti_semestre$DataScrutinio)
voti_semestre1718 <- voti_semestre[which(voti_semestre$DataScrutinio<='2018-08-31'),]
voti_semestre <- voti_semestre[which(voti_semestre$DataScrutinio>'2018-08-31'),]
voti_singoli$DataValutazione <- as.Date(voti_singoli$DataValutazione, "%d/%m/%Y")
voti_singoli1718 <- voti_singoli[which(voti_singoli$DataValutazione<='2018-08-31'),]
voti_singoli <- voti_singoli[which(voti_singoli$DataValutazione>'2018-08-31'),]
voti_media_sett1718 <- voti_media_sett[which((voti_media_sett$Anno==2018 & voti_media_sett$Settimana<=22) | voti_media_sett$Anno==2017),]
voti_media_sett <- voti_media_sett[which((voti_media_sett$Anno==2018 & voti_media_sett$Settimana>22) | voti_media_sett$Anno==2019),]
voti_semestre <- voti_semestre[voti_semestre$Insegnamento %in% c("MATEMATICA"),]
voti_media_sett <- voti_media_sett[voti_media_sett$Insegnamento %in% c("MATEMATICA"),]
voti_singoli <- voti_singoli[voti_singoli$Insegnamento %in% c("MATEMATICA"),]
voti_singoli1718 <- voti_singoli1718[voti_singoli1718$Insegnamento %in% c("MATEMATICA"),]
#debito
oid_studenti <- unique(voti_semestre1718$Oid)
debiti1718 <- data.frame(
Oid = numeric(0),
debito_prec = numeric(0),
debito_ita_prec = numeric(0),
debito_ing_prec = numeric(0),
debito_mate_prec = numeric(0)
)
for (Oid in oid_studenti) {
voti <- voti_semestre1718[which(voti_semestre1718$Oid==Oid),]
voti_ita <- voti[which(voti$Insegnamento=="ITALIANO"),]
voti_ing <- voti[which(voti$Insegnamento=="INGLESE"),]
voti_mate <-voti[voti$Insegnamento %in% c("MATEMATICA", "MATEMATICA AVANZATA"),]
debito_prec <- ifelse(sum(voti$Debito)!=0,1,0)
debito_ita_prec <- ifelse(sum(voti_ita$Debito)!=0,1,0)
debito_ing_prec <- ifelse(sum(voti_ing$Debito)!=0,1,0)
debito_mate_prec <- ifelse(sum(voti_mate$Debito)!=0,1,0)
riga <- cbind(Oid, debito_prec, debito_ita_prec, debito_ing_prec, debito_mate_prec)
debiti1718 <- rbind(debiti1718,riga)
}
View(debiti1718)
voti_primo_quadrimestre = voti_semestre[which(voti_semestre$Periodo=="Secondo Periodo 2018-19" | voti_semestre$Periodo=="Primo Quadrimestre 2018-19"),c(1,4)]
names(voti_primo_quadrimestre)[2]="mate_primo_quad"
View(debiti1718)
new_studenti = merge(new_studenti,voti_primo_quadrimestre,by="Oid")
new_studenti = merge(studenti,voti_primo_quadrimestre,by="Oid")
#add variance of each student's  math grades (updated at 21^ sett and 41^ sett e anno precedente)
student_oid=unique(new_studenti$Oid)
varianze <- data.frame(
Oid = numeric(0),
varianza1718 = numeric(0),
varianza21 = numeric(0),
varianza41 = numeric(0)
)
for (Oid in student_oid) {
voti_studente=voti_singoli[which(voti_singoli$Oid==Oid),7]
voti_studente_primo_quad=voti_singoli[which(voti_singoli$Oid==Oid & voti_singoli$DataValutazione<'2019-01-17'),7]
voti_studente1718=voti_singoli1718[which(voti_singoli1718$Oid==Oid),7]
varianza1718=var(voti_studente1718)
varianza41=var(voti_studente)
varianza21=var(voti_studente_primo_quad)
riga <- cbind(Oid, varianza1718, varianza41, varianza21)
varianze <- rbind(varianze,riga)
}
varianze$varianza21[which(is.na(varianze$varianza21))]=0 #students with only one grade in the first semester (rows 55 and 244)
new_studenti=merge(new_studenti,varianze,by="Oid")
new_studenti$varianza1718=as.numeric(new_studenti$varianza1718)
new_studenti$varianza21=as.numeric(new_studenti$varianza21)
new_studenti$varianza41=as.numeric(new_studenti$varianza41)
perc_doc_ruolo = new_studenti$DocentiRuolo/new_studenti$Docenti
perc_doc_ruolo
new_studenti=cbind(new_studenti,perc_doc_ruolo)
which(new_studenti$DataNascita==2)
new_studenti[which(new_studenti$DataNascita==2),3]=1
Cittadinanza_bin=rep(1,dim(new_studenti)[1])
Cittadinanza_bin[which(new_studenti$Cittadinanza!="ITALIA")]=0
new_studenti=cbind(new_studenti,Cittadinanza_bin)
StatusFinale_bin_prec=rep(0,dim(new_studenti)[1])
StatusFinale_bin_prec[which(new_studenti$StatusFinale_prec=="P1")]=1
new_studenti=cbind(new_studenti,StatusFinale_bin_prec)
StatusFinale_bin=rep(0,dim(new_studenti)[1])
StatusFinale_bin[which(new_studenti$StatusFinale.x=="P1")]=1
new_studenti=cbind(new_studenti,StatusFinale_bin)
#delete the only student with Matematica_finale==3
which(new_studenti$Matematica_finale==3)
new_studenti <- new_studenti[which(new_studenti$Matematica_finale!=3),]
#rischio
new_studenti$Matematica_finale=as.numeric(new_studenti$Matematica_finale)
rischio=rep(1,dim(new_studenti)[1]) #at risk
rischio[which(new_studenti$Matematica_finale>5 & new_studenti$Matematica_finale<8)]=2 #medium
rischio[which(new_studenti$Matematica_finale>7)]=3 #no risk
new_studenti=cbind(new_studenti,rischio)
new_studenti$Classe[which(new_studenti$Settore=="Liceo Classico Paritario")] = sub("^", "C", new_studenti$Classe[which(new_studenti$Settore=="Liceo Classico Paritario")] )
new_studenti$Classe[which(new_studenti$Settore=="Liceo Internazionale per l'Intercultura")] = sub("^", "I", new_studenti$Classe[which(new_studenti$Settore=="Liceo Internazionale per l'Intercultura")] )
new_studenti$Classe[which(new_studenti$Settore=="Liceo Scientifico Paritario")] = sub("^", "S", new_studenti$Classe[which(new_studenti$Settore=="Liceo Scientifico Paritario")] )
new_studenti$Classe[which(new_studenti$Settore=="Liceo Scienze Umane Paritario")] = sub("^", "SU", new_studenti$Classe[which(new_studenti$Settore=="Liceo Scienze Umane Paritario")] )
new_studenti$Classe
assenze_perc21=new_studenti$assenze21/105 #5days x 21 weeks
assenze_perc41=new_studenti$assenze41/205 #5days x 41 weeks
new_studenti=cbind(new_studenti,assenze_perc21)
new_studenti=cbind(new_studenti,assenze_perc41)
assenze_perc21
setwd("D:/tesi2/dati")
studenti <- read.csv("studenti_2_marzo.csv", row.names=1)
voti_semestre <- read.csv("2021-02-17_10-35-13_polimi_valutazione.csv", sep = ';', dec = '.')
voti_singoli <- read.csv("2021-02-17_10-35-13_polimi_registro_valutazioni_flat.csv", sep = ';', dec = '.')
voti_singoli$Valutazione = (voti_singoli$Valutazione)/10
names(voti_singoli)[1] = "Oid"
voti_media_sett <- read.csv("2021-02-17_10-35-13_polimi_registro_valutazioni_settimana.csv", sep = ';', dec = '.')
names(voti_media_sett)[1] = "Oid"
#select only Math and 2018/2019
#keep only note, assenze, ritardi complessivi (non conto settimanale) e primo quadrimestre (21^ sett)
studenti <- studenti[,-c(seq(268,349),seq(394,475),seq(22,41),seq(43,61),seq(63,82),seq(84,102),seq(104,123),seq(125,143),seq(145,164),seq(166,184),seq(186,205),seq(207,225))]
#media ita e ing; no_ita e no_ing; assenze; note merito,impegno, disciplinari, ritardi (tengo 21 e 41)
voti_semestre$DataScrutinio <- as.Date(voti_semestre$DataScrutinio)
voti_semestre1718 <- voti_semestre[which(voti_semestre$DataScrutinio<='2018-08-31'),]
voti_semestre <- voti_semestre[which(voti_semestre$DataScrutinio>'2018-08-31'),]
voti_singoli$DataValutazione <- as.Date(voti_singoli$DataValutazione, "%d/%m/%Y")
voti_singoli1718 <- voti_singoli[which(voti_singoli$DataValutazione<='2018-08-31'),]
voti_singoli <- voti_singoli[which(voti_singoli$DataValutazione>'2018-08-31'),]
voti_media_sett1718 <- voti_media_sett[which((voti_media_sett$Anno==2018 & voti_media_sett$Settimana<=22) | voti_media_sett$Anno==2017),]
voti_media_sett <- voti_media_sett[which((voti_media_sett$Anno==2018 & voti_media_sett$Settimana>22) | voti_media_sett$Anno==2019),]
voti_semestre <- voti_semestre[voti_semestre$Insegnamento %in% c("MATEMATICA"),]
voti_media_sett <- voti_media_sett[voti_media_sett$Insegnamento %in% c("MATEMATICA"),]
voti_singoli <- voti_singoli[voti_singoli$Insegnamento %in% c("MATEMATICA"),]
voti_singoli1718 <- voti_singoli1718[voti_singoli1718$Insegnamento %in% c("MATEMATICA"),]
#add first semester grade to studenti dataset
voti_primo_quadrimestre = voti_semestre[which(voti_semestre$Periodo=="Secondo Periodo 2018-19" | voti_semestre$Periodo=="Primo Quadrimestre 2018-19"),c(1,4)]
names(voti_primo_quadrimestre)[2]="mate_primo_quad"
new_studenti = merge(studenti,voti_primo_quadrimestre,by="Oid")
#add variance of each student's  math grades (updated at 21^ sett and 41^ sett e anno precedente)
student_oid=unique(new_studenti$Oid)
varianze <- data.frame(
Oid = numeric(0),
varianza1718 = numeric(0),
varianza21 = numeric(0),
varianza41 = numeric(0)
)
for (Oid in student_oid) {
voti_studente=voti_singoli[which(voti_singoli$Oid==Oid),7]
voti_studente_primo_quad=voti_singoli[which(voti_singoli$Oid==Oid & voti_singoli$DataValutazione<'2019-01-17'),7]
voti_studente1718=voti_singoli1718[which(voti_singoli1718$Oid==Oid),7]
varianza1718=var(voti_studente1718)
varianza41=var(voti_studente)
varianza21=var(voti_studente_primo_quad)
riga <- cbind(Oid, varianza1718, varianza41, varianza21)
varianze <- rbind(varianze,riga)
}
varianze$varianza21[which(is.na(varianze$varianza21))]=0 #students with only one grade in the first semester (rows 55 and 244)
new_studenti=merge(new_studenti,varianze,by="Oid")
new_studenti$varianza1718=as.numeric(new_studenti$varianza1718)
new_studenti$varianza21=as.numeric(new_studenti$varianza21)
new_studenti$varianza41=as.numeric(new_studenti$varianza41)
#preprocessing
perc_doc_ruolo = new_studenti$DocentiRuolo/new_studenti$Docenti
new_studenti=cbind(new_studenti,perc_doc_ruolo)
which(new_studenti$DataNascita==2)
new_studenti[which(new_studenti$DataNascita==2),3]=1
Cittadinanza_bin=rep(1,dim(new_studenti)[1])
Cittadinanza_bin[which(new_studenti$Cittadinanza!="ITALIA")]=0
new_studenti=cbind(new_studenti,Cittadinanza_bin)
StatusFinale_bin_prec=rep(0,dim(new_studenti)[1])
StatusFinale_bin_prec[which(new_studenti$StatusFinale_prec=="P1")]=1
new_studenti=cbind(new_studenti,StatusFinale_bin_prec)
StatusFinale_bin=rep(0,dim(new_studenti)[1])
StatusFinale_bin[which(new_studenti$StatusFinale.x=="P1")]=1
new_studenti=cbind(new_studenti,StatusFinale_bin)
#delete the only student with Matematica_finale==3
which(new_studenti$Matematica_finale==3)
new_studenti <- new_studenti[which(new_studenti$Matematica_finale!=3),]
#rischio
new_studenti$Matematica_finale=as.numeric(new_studenti$Matematica_finale)
rischio=rep(1,dim(new_studenti)[1]) #at risk
rischio[which(new_studenti$Matematica_finale>5 & new_studenti$Matematica_finale<8)]=2 #medium
rischio[which(new_studenti$Matematica_finale>7)]=3 #no risk
new_studenti=cbind(new_studenti,rischio)
new_studenti$Classe[which(new_studenti$Settore=="Liceo Classico Paritario")] = sub("^", "C", new_studenti$Classe[which(new_studenti$Settore=="Liceo Classico Paritario")] )
new_studenti$Classe[which(new_studenti$Settore=="Liceo Internazionale per l'Intercultura")] = sub("^", "I", new_studenti$Classe[which(new_studenti$Settore=="Liceo Internazionale per l'Intercultura")] )
new_studenti$Classe[which(new_studenti$Settore=="Liceo Scientifico Paritario")] = sub("^", "S", new_studenti$Classe[which(new_studenti$Settore=="Liceo Scientifico Paritario")] )
new_studenti$Classe[which(new_studenti$Settore=="Liceo Scienze Umane Paritario")] = sub("^", "SU", new_studenti$Classe[which(new_studenti$Settore=="Liceo Scienze Umane Paritario")] )
assenze_perc21=new_studenti$assenze21/105 #5days x 21 weeks
assenze_perc41=new_studenti$assenze41/205 #5days x 41 weeks
new_studenti=cbind(new_studenti,assenze_perc21)
new_studenti=cbind(new_studenti,assenze_perc41)
write.table(new_studenti, "new_studenti.csv", sep = ";", dec = ",", row.names=FALSE)
