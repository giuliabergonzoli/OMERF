knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/tesi2/dati")
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("new_studenti.csv", sep = ";", dec = ",")
studenti$DataNascita=as.factor(studenti$DataNascita)
studenti$Sesso=as.factor(studenti$Sesso)
studenti$Cittadinanza_bin=as.factor(studenti$Cittadinanza_bin)
studenti$PEI=as.factor(studenti$PEI)
studenti$PDB=as.factor(studenti$PDB)
studenti$StatusFinale_bin_prec=as.factor(studenti$StatusFinale_bin_prec)
studenti$debito_prec=as.factor(studenti$debito_prec)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("new_studenti.csv", sep = ";", dec = ",")
studenti$DataNascita=as.factor(studenti$DataNascita)
studenti$Sesso=as.factor(studenti$Sesso)
studenti$Cittadinanza_bin=as.factor(studenti$Cittadinanza_bin)
studenti$PEI=as.factor(studenti$PEI)
studenti$PDB=as.factor(studenti$PDB)
studenti$StatusFinale_bin_prec=as.factor(studenti$StatusFinale_bin_prec)
#studenti$mate_primo_quad=as.factor(studenti$mate_primo_quad)
#possible responses
studenti$voto_ultima_sett=as.factor(studenti$voto_ultima_sett)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("new_studenti.csv", sep = ";", dec = ",")
studenti$DataNascita=as.factor(studenti$DataNascita)
studenti$Sesso=as.factor(studenti$Sesso)
studenti$Cittadinanza_bin=as.factor(studenti$Cittadinanza_bin)
studenti$PEI=as.factor(studenti$PEI)
studenti$PDB=as.factor(studenti$PDB)
studenti$StatusFinale_bin_prec=as.factor(studenti$StatusFinale_bin_prec)
#studenti$mate_primo_quad=as.factor(studenti$mate_primo_quad)
#possible responses
studenti$rischio=as.factor(studenti$rischio)
studenti$Matematica_finale=as.factor(studenti$Matematica_finale)
#possible random effects
studenti$Settore=as.factor(studenti$Settore)
studenti$Classe=as.factor(studenti$Classe)
set.seed(1999)
library(caret)
split_indices <- createDataPartition(studenti$Matematica_finale, p = 0.80, list = FALSE)
data_test_orig <- studenti[-split_indices, ]
# 'DataNascita','Sesso','PEI','PDB','StatusFinale_bin_prec','perc_doc_ruolo','MediaFinale_prec','Matematica_finale_prec','mate_primo_quad',
# 'assenze_perc21','assenze_perc41','assenze21','note_merito21','note_impegno21','note_disciplinari21','ritardi21','varianza21','varianza1718','debito_prec','debito_mate_prec'
data_test <- data_test_orig[,c('DataNascita','Cittadinanza_bin','Sesso','PDB','perc_doc_ruolo','mate_primo_quad','assenze_perc21','note_merito21','note_disciplinari21','note_impegno21','ritardi21','varianza21','Matematica_finale_prec')]
names(data_test) = c("regular","nationality","gender","PDB","tenured_teachers","first_term_math","absence","merit_notes","disciplinary_notes","commitment_notes","delays","variance","previous_math")
studenti <- studenti[split_indices, ]
table(studenti$Matematica_finale)
y_test_orig=data_test_orig$Matematica_finale
y=studenti$Matematica_finale
cov=studenti[,c('DataNascita','Cittadinanza_bin','Sesso','PDB','perc_doc_ruolo','mate_primo_quad','assenze_perc21','note_merito21','note_disciplinari21','note_impegno21','ritardi21','varianza21','Matematica_finale_prec')]
names(cov) = c("regular","nationality","gender","PDB","tenured_teachers","first_term_math","absence","merit_notes","disciplinary_notes","commitment_notes","delays","variance","previous_math")
group=studenti$Classe
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/magistrale/tesi/Master_Thesis/Def_files/dati")
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ";", dec = ",")
View(studenti)
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".")
View(studenti)
studenti <- na.omit(studenti)
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".")
studenti <- na.omit(studenti)
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
View(studenti)
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
View(studenti)
View(studenti)
studenti <- studenti[,-1]
sum(is.na(studenti[,1]))
sum(is.na(studenti[,2]))
sum(is.na(studenti[,3]))
sum(is.na(studenti[,4]))
sum(is.na(studenti[,5]))
sum(is.na(studenti[,6]))
sum(is.na(studenti[,7]))
studenti$DataNascita=as.factor(studenti$DataNascita)
sum(is.na(studenti[,8]))
sum(is.na(studenti[,9]))
sum(is.na(studenti[,10]))
sum(is.na(studenti[,11]))
?seq
?rep
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
source("OMERF_new.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/magistrale/tesi/Master_Thesis/Def_files/dati")
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- studenti[,-1]
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
names(studenti)
View(studenti)
studenti$gender <- as.factor(studenti$gender)
studenti$immig <- as.factor(studenti$immig)
#random effects
studenti$school_ID <- as.factor(studenti$school_ID)
#responses
studenti$mate9=as.factor(studenti$mate9)
studenti$mate3=as.factor(studenti$mate3)
levels(studenti$school_ID)
t=table(studenti$school_ID)
t
max(t)
min(t)
t[which(t>10)]
t
which(t>10)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/magistrale/tesi/Master_Thesis/Def_files/dati")
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
studenti$gender <- as.factor(studenti$gender)
studenti$immig <- as.factor(studenti$immig)
#random effects
studenti$school_ID <- as.factor(studenti$school_ID) #340 schools
#responses
studenti$mate9=as.factor(studenti$mate9)
studenti$mate3=as.factor(studenti$mate3)
#keep schools with at least 10 students
school_counts=table(studenti$school_ID)
selected_sch <- names(school_counts[school_counts >= 10])
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
table(studenti_new$school_ID)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
#keep schools with at least 10 students
school_counts=table(studenti$school_ID)
selected_sch <- names(school_counts[school_counts >= 10])
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
table(studenti_new$school_ID)
studenti_new$gender <- as.factor(studenti_new$gender)
studenti_new$immig <- as.factor(studenti_new$immig)
#random effects
studenti_new$school_ID <- as.factor(studenti_new$school_ID)
#responses
studenti_new$mate9=as.factor(studenti_new$mate9)
studenti_new$mate3=as.factor(studenti_new$mate3)
set.seed(1999)
library(caret)
split_indices <- createDataPartition(studenti_new$mate9, p = 0.80, list = FALSE)
data_test_orig <- studenti_new[-split_indices, ]
names(data_test_orig)
View(studenti_new)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- studenti[,-1]
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
#keep schools with at least 10 students
school_counts=table(studenti$school_ID) #340 schools
selected_sch <- names(school_counts[school_counts >= 10]) #293 schools
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
studenti_new$gender <- as.factor(studenti_new$gender)
studenti_new$immig <- as.factor(studenti_new$immig)
#random effects
studenti_new$school_ID <- as.factor(studenti_new$school_ID)
#responses
studenti_new$mate9=as.factor(studenti_new$mate9)
studenti_new$mate3=as.factor(studenti_new$mate3)
set.seed(1999)
library(caret)
split_indices <- createDataPartition(studenti_new$mate9, p = 0.80, list = FALSE)
data_test_orig <- studenti_new[-split_indices, ]
data_test <- data_test_orig[,c("school_ID", "grade", "gender", "immig", "video_games", "internet_quality", "internet_availability", "SCHRISK", "BULLIED", "BELONG", "COOPAGR", "TEACHSUP", "FAMSUP", "PERSEVAGR", "ASSERAGR", "EMPATAGR", "EMOCOAGR", "STRESAGR", "CURIOAGR", "math_time", "study_time", "MISCED", "FISCED", "HISCED", "ESCS", "mate9")] #, "mate3"
studenti <- studenti[split_indices, ]
studenti_new <- studenti_new[split_indices, ]
table(studenti_new$mate9)
View(studenti)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- studenti[,-1]
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
#keep schools with at least 10 students
school_counts=table(studenti$school_ID) #340 schools
selected_sch <- names(school_counts[school_counts >= 10]) #293 schools
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
studenti_new$gender <- as.factor(studenti_new$gender)
studenti_new$immig <- as.factor(studenti_new$immig)
#random effects
studenti_new$school_ID <- as.factor(studenti_new$school_ID)
#responses
studenti_new$mate9=as.factor(studenti_new$mate9)
studenti_new$mate3=as.factor(studenti_new$mate3)
set.seed(1999)
library(caret)
split_indices <- createDataPartition(studenti_new$mate9, p = 0.80, list = FALSE)
data_test_orig <- studenti_new[-split_indices, ]
data_test <- data_test_orig[,c("grade", "gender", "immig", "video_games", "internet_quality", "internet_availability", "SCHRISK", "BULLIED", "BELONG", "COOPAGR", "TEACHSUP", "FAMSUP", "PERSEVAGR", "ASSERAGR", "EMPATAGR", "EMOCOAGR", "STRESAGR", "CURIOAGR", "math_time", "study_time", "MISCED", "FISCED", "HISCED", "ESCS")]
studenti_new <- studenti_new[split_indices, ]
y_test_orig=data_test_orig$mate9
y=studenti_new$mate9
cov=studenti_new[,c("grade", "gender", "immig", "video_games", "internet_quality", "internet_availability", "SCHRISK", "BULLIED", "BELONG", "COOPAGR", "TEACHSUP", "FAMSUP", "PERSEVAGR", "ASSERAGR", "EMPATAGR", "EMOCOAGR", "STRESAGR", "CURIOAGR", "math_time", "study_time", "MISCED", "FISCED", "HISCED", "ESCS")]
group=studenti_new$school_ID
library(ordinal)
clm.data= cbind(y,cov)
clm.0=clm(y ~ grade+gender+immig+video_games+internet_quality+internet_availability+SCHRISK+BULLIED+BELONG+COOPAGR+TEACHSUP+FAMSUP+PERSEVAGR+ASSERAGR+EMPATAGR+EMOCOAGR+STRESAGR+CURIOAGR+math_time+study_time+MISCED+FISCED+HISCED+ESCS, data=clm.data, link='logit')
summary(clm.0)
# If type = "cum.prob" or type = "linear.predictor" there will be two sets of predictions, standard errors and intervals;
# one for j and one for j-1 (in the usual notation) where j = 1, ..., J index the response classes.
# TEST
mu_clm_t.0=predict(clm.0,data_test)$fit
lev=levels(clm.data$y)
names(mu_clm_t.0) = lev
y_clm_t.0 <- as.numeric(names(mu_clm_t.0)[apply(mu_clm_t.0, 1, which.max)])
mu_clm_t.0
summary(clm.0)
# If type = "cum.prob" or type = "linear.predictor" there will be two sets of predictions, standard errors and intervals;
# one for j and one for j-1 (in the usual notation) where j = 1, ..., J index the response classes.
# TEST
mu_clm_t.0=predict(clm.0,data_test)$fit
mu_clm_t.0
View(mu_clm_t.0)
lev=levels(clm.data$y)
names(mu_clm_t.0) = lev
View(mu_clm_t.0)
y_clm_t.0 <- as.numeric(names(mu_clm_t.0)[apply(mu_clm_t.0, 1, which.max)])
names(mu_clm_t.0)[apply(mu_clm_t.0, 1, which.max)]
y_clm_t.0 <- names(mu_clm_t.0)[apply(mu_clm_t.0, 1, which.max)]
View(mu_clm_t.0)
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
View(studenti)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- studenti[,-1]
studenti$mate9[which(studenti$mate9=="6"),]=="8"
which(studenti$mate9=="6")
studenti$mate9[which(studenti$mate9=="6"),]="8"
studenti$mate9[which(studenti$mate9=="6")]="8"
View(studenti)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- studenti[,-1]
studenti$mate9[which(studenti$mate9=="6")]="8"
studenti$mate9[which(studenti$mate9=="5")]="7"
studenti$mate9[which(studenti$mate9=="4")]="6"
studenti$mate9[which(studenti$mate9=="3")]="5"
studenti$mate9[which(studenti$mate9=="2")]="4"
studenti$mate9[which(studenti$mate9=="1c")]="3"
studenti$mate9[which(studenti$mate9=="1b")]="2"
studenti$mate9[which(studenti$mate9=="1a")]="1"
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
#keep schools with at least 10 students
school_counts=table(studenti$school_ID) #340 schools
selected_sch <- names(school_counts[school_counts >= 10]) #293 schools
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
studenti_new$gender <- as.factor(studenti_new$gender)
studenti_new$immig <- as.factor(studenti_new$immig)
#random effects
studenti_new$school_ID <- as.factor(studenti_new$school_ID)
#responses
studenti_new$mate9=as.factor(studenti_new$mate9)
studenti_new$mate3=as.factor(studenti_new$mate3)
set.seed(1999)
View(studenti)
View(studenti_new)
View(studenti)
source("OMERF_new.R")
source("ord_class_index.R")
source('index.R')
studenti <- read.csv("student_ita.csv", sep = ",", dec = ".") #10552
studenti <- studenti[,-1]
studenti$mate9[which(studenti$mate9=="6")]="8"
studenti$mate9[which(studenti$mate9=="5")]="7"
studenti$mate9[which(studenti$mate9=="4")]="6"
studenti$mate9[which(studenti$mate9=="3")]="5"
studenti$mate9[which(studenti$mate9=="2")]="4"
studenti$mate9[which(studenti$mate9=="1c")]="3"
studenti$mate9[which(studenti$mate9=="1b")]="2"
studenti$mate9[which(studenti$mate9=="1a")]="1"
studenti$mate3[which(studenti$mate3=="high")]="3"
studenti$mate3[which(studenti$mate3=="medium")]="2"
studenti$mate3[which(studenti$mate3=="low")]="1"
na=rep(0,39)
for (i in 1:39) {
na[i]=sum(is.na(studenti[,i]))
}
na
studenti <- na.omit(studenti) #7833
View(studenti)
#keep schools with at least 10 students
school_counts=table(studenti$school_ID) #340 schools
selected_sch <- names(school_counts[school_counts >= 10]) #293 schools
studenti_new <- studenti[studenti$school_ID %in% selected_sch, ]
studenti_new$gender <- as.factor(studenti_new$gender)
studenti_new$immig <- as.factor(studenti_new$immig)
#random effects
studenti_new$school_ID <- as.factor(studenti_new$school_ID)
#responses
studenti_new$mate9=as.factor(studenti_new$mate9)
studenti_new$mate3=as.factor(studenti_new$mate3)
View(studenti)
View(studenti_new)
set.seed(1999)
library(caret)
split_indices <- createDataPartition(studenti_new$mate9, p = 0.80, list = FALSE)
data_test_orig <- studenti_new[-split_indices, ]
data_test <- data_test_orig[,c("grade", "gender", "immig", "video_games", "internet_quality", "internet_availability", "SCHRISK", "BULLIED", "BELONG", "COOPAGR", "TEACHSUP", "FAMSUP", "PERSEVAGR", "ASSERAGR", "EMPATAGR", "EMOCOAGR", "STRESAGR", "CURIOAGR", "math_time", "study_time", "MISCED", "FISCED", "HISCED", "ESCS")]
studenti_new <- studenti_new[split_indices, ]
y_test_orig=data_test_orig$mate9
y=studenti_new$mate9
cov=studenti_new[,c("grade", "gender", "immig", "video_games", "internet_quality", "internet_availability", "SCHRISK", "BULLIED", "BELONG", "COOPAGR", "TEACHSUP", "FAMSUP", "PERSEVAGR", "ASSERAGR", "EMPATAGR", "EMOCOAGR", "STRESAGR", "CURIOAGR", "math_time", "study_time", "MISCED", "FISCED", "HISCED", "ESCS")]
group=studenti_new$school_ID
library(ordinal)
clm.data= cbind(y,cov)
clm.0=clm(y ~ grade+gender+immig+video_games+internet_quality+internet_availability+SCHRISK+BULLIED+BELONG+COOPAGR+TEACHSUP+FAMSUP+PERSEVAGR+ASSERAGR+EMPATAGR+EMOCOAGR+STRESAGR+CURIOAGR+math_time+study_time+MISCED+FISCED+HISCED+ESCS, data=clm.data, link='logit')
summary(clm.0)
# If type = "cum.prob" or type = "linear.predictor" there will be two sets of predictions, standard errors and intervals;
# one for j and one for j-1 (in the usual notation) where j = 1, ..., J index the response classes.
# TEST
mu_clm_t.0=predict(clm.0,data_test)$fit
lev=levels(clm.data$y)
names(mu_clm_t.0) = lev
y_clm_t.0 <- as.numeric(names(mu_clm_t.0)[apply(mu_clm_t.0, 1, which.max)])
prob_t.0=predict(clm.0,data_test,type = "cum.prob")[1]
prob_clm_t.0=prob_t.0$cprob1
prob_clm_t.0[which(prob_clm_t.0==1)]=0.9999
eta_clm_t.0=qlogis(prob_clm_t.0)
View(prob_t.0)
forest.data=cbind(clm.data,group)
clmm.data=forest.data
clmm.0=clmm(y ~ grade+gender+immig+video_games+internet_quality+internet_availability+SCHRISK+BULLIED+BELONG+COOPAGR+TEACHSUP+FAMSUP+PERSEVAGR+ASSERAGR+EMPATAGR+EMOCOAGR+STRESAGR+CURIOAGR+math_time+study_time+MISCED+FISCED+HISCED+ESCS+(1|group), link='logit', data=clmm.data, Hess=TRUE, control=clmm.control(maxLineIter = 200, maxIter=500, grtol=1e-4))
summary(clmm.0)
# TEST
data_test=cbind(data_test,data_test_orig$school_ID)
names(data_test)[dim(data_test)[2]]='group'
eta_clmm_t.0=as.data.frame(matrix(0, dim(data_test)[1], length(lev)))
mu_clmm_t.0=as.data.frame(matrix(0, dim(data_test)[1], length(lev)))
names(mu_clmm_t.0) = lev
names(eta_clmm_t.0) = lev
View(eta_clmm_t.0)
View(clm.data)
for (j in lev) {
for (i in 1:dim(data_test)[1]) {
if (j==lev[1]) {
eta_clmm_t.0[i,j]=as.numeric(clmm.0$Theta[which(lev==j)]) - data_test$grade[i] * clmm.0$beta[1] - ifelse(data_test$gender[i]==1, clmm.0$beta[2], 0) - ifelse(data_test$immig[i]==1, clmm.0$beta[3], ifelse(data_test$immig[i]==2,clmm.0$beta[4],0)) - data_test$video_games[i] * clmm.0$beta[5] - data_test$internet_quality[i] * clmm.0$beta[6] - data_test$internet_availability[i] * clmm.0$beta[7] - data_test$SCHRISK[i] * clmm.0$beta[8] - data_test$BULLIED[i] * clmm.0$beta[9] - data_test$BELONG[i] * clmm.0$beta[10] - data_test$COOPAGR[i] * clmm.0$beta[11] - data_test$TEACHSUP[i] * clmm.0$beta[12] - data_test$FAMSUP[i] * clmm.0$beta[13] - data_test$PERSEVAGR[i] * clmm.0$beta[14] - data_test$ASSERAGR[i] * clmm.0$beta[15] - data_test$EMPATAGR[i] * clmm.0$beta[16] - data_test$EMOCOAGR[i] * clmm.0$beta[17] - data_test$STRESAGR[i] * clmm.0$beta[18] - data_test$CURIOAGR[i] * clmm.0$beta[19] - data_test$math_time[i] * clmm.0$beta[20] - data_test$study_time[i] * clmm.0$beta[21] - data_test$MISCED[i] * clmm.0$beta[22] - data_test$FISCED[i] * clmm.0$beta[23] - data_test$HISCED[i] * clmm.0$beta[24] - data_test$ESCS[i] * clmm.0$beta[25] - clmm.0$ranef[data_test$group[i]]
mu_clmm_t.0[i,j]=plogis(eta_clmm_t.0[i,j])
} else if(j==lev[length(lev)]) {
eta_clmm_t.0[i,j]=qlogis(0.999)
mu_clmm_t.0[i,j]=1 - plogis(as.numeric(clmm.0$Theta[which(lev==j)-1]) - data_test$grade[i] * clmm.0$beta[1] - ifelse(data_test$gender[i]==1, clmm.0$beta[2], 0) - ifelse(data_test$immig[i]==1, clmm.0$beta[3], ifelse(data_test$immig[i]==2,clmm.0$beta[4],0)) - data_test$video_games[i] * clmm.0$beta[5] - data_test$internet_quality[i] * clmm.0$beta[6] - data_test$internet_availability[i] * clmm.0$beta[7] - data_test$SCHRISK[i] * clmm.0$beta[8] - data_test$BULLIED[i] * clmm.0$beta[9] - data_test$BELONG[i] * clmm.0$beta[10] - data_test$COOPAGR[i] * clmm.0$beta[11] - data_test$TEACHSUP[i] * clmm.0$beta[12] - data_test$FAMSUP[i] * clmm.0$beta[13] - data_test$PERSEVAGR[i] * clmm.0$beta[14] - data_test$ASSERAGR[i] * clmm.0$beta[15] - data_test$EMPATAGR[i] * clmm.0$beta[16] - data_test$EMOCOAGR[i] * clmm.0$beta[17] - data_test$STRESAGR[i] * clmm.0$beta[18] - data_test$CURIOAGR[i] * clmm.0$beta[19] - data_test$math_time[i] * clmm.0$beta[20] - data_test$study_time[i] * clmm.0$beta[21] - data_test$MISCED[i] * clmm.0$beta[22] - data_test$FISCED[i] * clmm.0$beta[23] - data_test$HISCED[i] * clmm.0$beta[24] - data_test$ESCS[i] * clmm.0$beta[25] - clmm.0$ranef[data_test$group[i]])
} else {
eta_clmm_t.0[i,j]=as.numeric(clmm.0$Theta[which(lev==j)]) - data_test$grade[i] * clmm.0$beta[1] - ifelse(data_test$gender[i]==1, clmm.0$beta[2], 0) - ifelse(data_test$immig[i]==1, clmm.0$beta[3], ifelse(data_test$immig[i]==2,clmm.0$beta[4],0)) - data_test$video_games[i] * clmm.0$beta[5] - data_test$internet_quality[i] * clmm.0$beta[6] - data_test$internet_availability[i] * clmm.0$beta[7] - data_test$SCHRISK[i] * clmm.0$beta[8] - data_test$BULLIED[i] * clmm.0$beta[9] - data_test$BELONG[i] * clmm.0$beta[10] - data_test$COOPAGR[i] * clmm.0$beta[11] - data_test$TEACHSUP[i] * clmm.0$beta[12] - data_test$FAMSUP[i] * clmm.0$beta[13] - data_test$PERSEVAGR[i] * clmm.0$beta[14] - data_test$ASSERAGR[i] * clmm.0$beta[15] - data_test$EMPATAGR[i] * clmm.0$beta[16] - data_test$EMOCOAGR[i] * clmm.0$beta[17] - data_test$STRESAGR[i] * clmm.0$beta[18] - data_test$CURIOAGR[i] * clmm.0$beta[19] - data_test$math_time[i] * clmm.0$beta[20] - data_test$study_time[i] * clmm.0$beta[21] - data_test$MISCED[i] * clmm.0$beta[22] - data_test$FISCED[i] * clmm.0$beta[23] - data_test$HISCED[i] * clmm.0$beta[24] - data_test$ESCS[i] * clmm.0$beta[25] - clmm.0$ranef[data_test$group[i]]
mu_clmm_t.0[i,j]=plogis(eta_clmm_t.0[i,j]) -
plogis(as.numeric(clmm.0$Theta[which(lev==j)-1]) - data_test$grade[i] * clmm.0$beta[1] - ifelse(data_test$gender[i]==1, clmm.0$beta[2], 0) - ifelse(data_test$immig[i]==1, clmm.0$beta[3], ifelse(data_test$immig[i]==2,clmm.0$beta[4],0)) - data_test$video_games[i] * clmm.0$beta[5] - data_test$internet_quality[i] * clmm.0$beta[6] - data_test$internet_availability[i] * clmm.0$beta[7] - data_test$SCHRISK[i] * clmm.0$beta[8] - data_test$BULLIED[i] * clmm.0$beta[9] - data_test$BELONG[i] * clmm.0$beta[10] - data_test$COOPAGR[i] * clmm.0$beta[11] - data_test$TEACHSUP[i] * clmm.0$beta[12] - data_test$FAMSUP[i] * clmm.0$beta[13] - data_test$PERSEVAGR[i] * clmm.0$beta[14] - data_test$ASSERAGR[i] * clmm.0$beta[15] - data_test$EMPATAGR[i] * clmm.0$beta[16] - data_test$EMOCOAGR[i] * clmm.0$beta[17] - data_test$STRESAGR[i] * clmm.0$beta[18] - data_test$CURIOAGR[i] * clmm.0$beta[19] - data_test$math_time[i] * clmm.0$beta[20] - data_test$study_time[i] * clmm.0$beta[21] - data_test$MISCED[i] * clmm.0$beta[22] - data_test$FISCED[i] * clmm.0$beta[23] - data_test$HISCED[i] * clmm.0$beta[24] - data_test$ESCS[i] * clmm.0$beta[25] - clmm.0$ranef[data_test$group[i]])
}
}
}
max_mu_clmm_t.0 <- apply(mu_clmm_t.0, 1, max)
y_clmm_t.0 <- names(mu_clmm_t.0)[apply(mu_clmm_t.0, 1, which.max)]
max_eta_clmm_t.0 <- rep(0,dim(data_test)[1])
fitmu_clmm_t.0 <- rep(0,dim(data_test)[1])
fiteta_clmm_t.0 <- rep(0,dim(data_test)[1])
for (i in 1:dim(data_test)[1]) {
max_eta_clmm_t.0[i] <- eta_clmm_t.0[i,apply(mu_clmm_t.0, 1, which.max)[i]]
fitmu_clmm_t.0[i] <- mu_clmm_t.0[i,which(lev==y_test_orig[i])]
fiteta_clmm_t.0[i] <- eta_clmm_t.0[i,which(lev==y_test_orig[i])]
}
library(ordinalForest)
ordfor.data=forest.data
ordforest.0 <- ordfor(depvar = 'y', perffunction = 'probability', ordfor.data)
om.0 = omerf(y, cov, group)
